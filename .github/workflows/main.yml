on:
  push:
  pull_request:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Gardle Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}

      - name: Run Unit Tests
        run: bash ./gradlew test

      - name: Publish Unit Test Report
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        if: always()
        with:
          files: '**/build/test-results/testReleaseUnitTest/TEST-*.xml'
          
      - name: AVD Cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-29
          
      - name: Create AVD and Generate Snapshot for Caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-window -noaudio -no-boot-anim
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
          
      - name: Run Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          force-avd-creation: false
          emulator-options: -no-window -noaudio -no-boot-anim
          disable-animations: false
          script: ./gradlew connectedCheck
          
      - name: Publish Instrumentation Test Report
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        if: always()
        with:
          files: '**/build/outputs/androidTest-results/connected/TEST-*.xml'
          
#       - name: Slack Notification
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_CHANNEL: test
#           SLACK_COLOR: ${{ job.status }}
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
